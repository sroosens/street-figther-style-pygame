@startuml classes
set namespaceSeparator none
package "gym package" {
    class "ActionWrapper" as gym.core.ActionWrapper {
        {abstract} action(action)
        {abstract} reverse_action(action)
        step(action)
    }
    class "Env" as gym.core.Env {
        action_space : spaces.Space[ActType]
        metadata : Dict[str, Any]
        np_random
        observation_space : spaces.Space[ObsType]
        render_mode : Optional[str]
        reward_range : tuple
        spec : str
        unwrapped
        {abstract} close()
        {abstract} render() -> Optional[Union[RenderFrame, List[RenderFrame]]]
        reset() -> Tuple[ObsType, dict]
        {abstract} step(action: ActType) -> Tuple[ObsType, float, bool, bool, dict]
    }
    class "ObservationWrapper" as gym.core.ObservationWrapper {
        {abstract} observation(observation)
        reset()
        step(action)
    }
    class "RewardWrapper" as gym.core.RewardWrapper {
        {abstract} reward(reward)
        step(action)
    }
    class "Wrapper" as gym.core.Wrapper {
        action_space
        env
        metadata
        np_random
        observation_space
        render_mode
        reward_range
        spec
        unwrapped
        class_name()
        close()
        render() -> Optional[Union[RenderFrame, List[RenderFrame]]]
        reset() -> Tuple[ObsType, dict]
        step(action: ActType) -> Tuple[ObsType, float, bool, bool, dict]
    }
    gym.core.ActionWrapper --|> gym.core.Wrapper
    gym.core.ObservationWrapper --|> gym.core.Wrapper
    gym.core.RewardWrapper --|> gym.core.Wrapper
    gym.core.Wrapper --|> gym.core.Env
    gym.core.Env --o gym.core.Wrapper : env
}

class "DQNAgent" as agent_DQN.DQNAgent {
  ...
  build_eval_network(n_l1, n_l2, W_init, b_init)
  build_target_network(n_l1, n_l2, W_init, b_init)
  choose_action(observation)
  learn()
  plot_cost()
  replace_target_net_parameters()
  save_model()
  store_transition(s, a, r, s_)
}


class "AI" as fighter.AI {
  attack_type : int
  blocking : bool
  jumping : bool
  offset : list
  running : bool
  vel_y : int
  move(debug_surf, target, round_over)
}
class "Agent" as fighter.Agent {
  ACT_BLOCK : int
  ACT_JUMP : int
  ACT_LEFT : int
  ACT_PUNCH : int
  ACT_RIGHT : int
  blocking : bool
  jumping : bool
  offset : list
  running : bool
  vel_y : int
  move(debug_surf, target, round_over, action)
}
class "Fighter" as fighter.Fighter {
  GRAVITY : int
  SPEED : int
  action : int
  alive : bool
  animation_list : list
  attack_cooldown : int
  attack_type : int
  attacking : bool
  binx()
  blocking : bool
  flip : bool
  frame_index : int
  health : int
  hit : bool
  hit_cooldown : int
  image
  image_scale : int
  jumping : bool
  offset : list
  punching : bool
  rect
  running : bool
  screen_height
  screen_width
  size_x : int
  size_y : int
  update_time
  vel_y : int
  attack(debug_surf, target)
  draw(surface, color)
  fetch_sprites(sprite_sheet, animation_steps)
  update()
  update_action(new_action)
  update_movement(dx, dy, target)
}
class "Player" as fighter.Player {
  attack_type : int
  blocking : bool
  controls
  jumping : bool
  running : bool
  vel_y : int
  move(debug_surf, target, round_over)
}

class "GameEnvironment" as StreetFighterGameEnv.SFGameEnv {
  action_space : Discrete
  bg_image
  chara_sheet_p1
  chara_sheet_p2
  fighter_1 : AI
  fighter_2 : Agent
  font : Font
  observation_space : MultiDiscrete
  round_over : bool
  score : list
  screen
  close()
  compute_reward()
  draw_bg()
  draw_health_bar(health, x, y, flip)
  draw_text(text, font, text_col, x, y)
  render()
  reset()
  step(action)
}

file "train_Q.py" {
    class MainTrainQ {
        + run()
    }
}

file "test_Q.py" {
    class MainTestQ {
        + run()
    }
}

file "train_DQN.py" {
    class MainTrainDQN {
        + run()
    }
}

file "test_DQN.py" {
    class MainTestDQN {
        + run()
    }
}

file "play_mult.py" {
    class MainPlay {
        + run()
    }
}

StreetFighterGameEnv.SFGameEnv --|> Env

fighter.AI --|> fighter.Fighter
fighter.Agent --|> fighter.Fighter
fighter.Player --|> fighter.Fighter
StreetFighterGameEnv.SFGameEnv --> fighter.AI
StreetFighterGameEnv.SFGameEnv --> fighter.Agent


MainPlay --> fighter.Player
MainTrainQ --> StreetFighterGameEnv.SFGameEnv
MainTestQ --> StreetFighterGameEnv.SFGameEnv
MainTrainDQN --> StreetFighterGameEnv.SFGameEnv
MainTrainDQN --> agent_DQN.DQNAgent
MainTestDQN --> StreetFighterGameEnv.SFGameEnv
MainTestDQN --> agent_DQN.DQNAgent

@enduml
